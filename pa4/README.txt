Programming Assignment #4
John Doherty (doherty1)

For this assignment I parallelized fftx and ifftx and called them with the transpose of the image to compute ffty and iffty. I parallelized fftx and ifftx in the same way. I initially compute the (2 * PI * k * n /N) term for every k, n pair in the image. Every k, n pair is independent so these terms can be computed in parallel very quickly. The next step is to compute the transformation for each x in the image. Again, the transform for each x can be computed in parallel because the values they depend on are independent. I decided to perform fftx and ifftx in parallel for x because the elements in each row, x, of the image are contiguous in memory. Each thread minimizes the working set and the amount of overlapping data between threads is small. Performing these operations over ys instead of xs would result in a lot of false sharing between threads and would decrease performance. I discovered this by benchmarking each operation in the filtering function and noticed that ffty and iffty were significantly slower than fftx and ifftx. Computing the transpose dramatically speeds up all of these operations. This is correct because fftx and ifftx are the same as ffty and iffty just one is over elements in the x direction the other is over elements in the y direction.
